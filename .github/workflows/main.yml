name: Sync to Back Repository

on:
  push:
    branches:
      - main

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Download code Front Repository
        uses: actions/checkout@v3
        with:
          path: front-repo
        
      - name: Download Back Repository
        uses: actions/checkout@v3
        with:
          repository: SEOKJUN-KO/ActionTest
          token: ${{ secrets.TEST_KEY }}
          ref: main
          path: backend-repo


      - name: Set Branch name
        run: echo "AUTO_BUILD_NAME=autoBuild_${{ github.run_id }}_$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_ENV

      - name: Move To Branch
        run: |
          cd backend-repo
          git pull origin main
          git branch $AUTO_BUILD_NAME
          git checkout $AUTO_BUILD_NAME

      - name: Replace Static Files
        run: |
          rm -rf backend-repo/dist/asset
          cp -R front-repo/사전 backend-repo/dist

      - name: Copy contents and Write
        run: |
          echo '{% load static %}' > backend-repo/dist/asset/index-CfExPKC4.js
          cat backend-repo/dist/사전/10816.py >> backend-repo/dist/asset/index-CfExPKC4.js
          
      - name: Commit and Push Changes
        run: |
          cd backend-repo
          git config --global user.name "GitHub Actions"
          git config --global user.email "tjrwns1021@gmail.com"
          git add .
          git commit -m "Update dist folder with latest build"
          git push --set-upstream origin $AUTO_BUILD_NAME
        env:
          TEST_KEY: ${{ secrets.TEST_KEY }}

      - name: Check for Merge Conflicts
        run: |
          cd backend-repo
          git fetch origin main
          git merge --no-commit --no-ff origin/main || echo "conflict" > merge_status.txt
          
      - name: Handle Merge Conflicts
        if: ${{ failure() || (hashFiles('**/merge_status.txt') != '') }}
        run: |
          echo "Merge conflict detected. Sending alert..."
          # 알림을 이메일로 보내거나 원하는 방식으로 추가 처리 가능
          # 예: echo "Merge conflict occurred" | mail -s "GitHub Action Alert" example@mail.com
        env:
          TEST_KEY: ${{ secrets.TEST_KEY }}

      - name: Create Pull Request and Merge
        if: ${{ success() && hashFiles('**/merge_status.txt') == '' }}
        run: |
          cd backend-repo
          echo "No conflicts detected. Creating Pull Request..."
          gh pr create \
            --base main \
            --head $AUTO_BUILD_NAME \
            --title "New Build Files" \
            --body "Automatically generated Pull Request for new build files."
          
          echo "Attempting to merge the Pull Request..."
          PR_NUMBER=$(gh pr view --json number -q '.number')
          gh pr merge $PR_NUMBER --merge --admin
          echo "Pull Request #$PR_NUMBER successfully merged."
          git checkout main
          git branch -d $AUTO_BUILD_NAME
        env:
          GH_TOKEN: ${{ secrets.TEST_KEY }}
